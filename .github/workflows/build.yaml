# Build check workflow
# Used to check if projectMSDL compiles with upstream master of libprojectM.
# The resulting binaries are not considered for public use though.
name: Build Check

on: push

jobs:

  build-windows:
    name: Windows, x64
    runs-on: self-hosted

    steps:
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout libprojectM Sources
        uses: actions/checkout@v4
        with:
          repository: projectM-visualizer/projectm
          path: projectm
          submodules: recursive

      - name: Build/Install libprojectM
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
        run: |
          mkdir cmake-build-libprojectm
          cmake -G "Visual Studio 17 2022" -A "X64" -S "${{ github.workspace }}/projectm" -B "${{ github.workspace }}/cmake-build-libprojectm" -DCMAKE_TOOLCHAIN_FILE="${Env:VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install-libprojectm" -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded$<$<CONFIG:Debug>:Debug>" -DCMAKE_VERBOSE_MAKEFILE=YES -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTING=NO
          cmake --build "${{ github.workspace }}/cmake-build-libprojectm" --config Release --parallel
          cmake --install "${{ github.workspace }}/cmake-build-libprojectm" --config Release

      - name: Checkout projectMSDL Sources
        uses: actions/checkout@v4
        with:
          path: frontend-sdl2
          submodules: recursive

      - name: Build projectMSDL
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
        run: |
          mkdir cmake-build-frontend-sdl2
          cmake -G "Visual Studio 17 2022" -A "X64" -S "${{ github.workspace }}/frontend-sdl2" -B "${{ github.workspace }}/cmake-build-frontend-sdl2" -DCMAKE_TOOLCHAIN_FILE="${Env:VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-static  -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install-libprojectm" -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install-frontend-sdl2" -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded$<$<CONFIG:Debug>:Debug>" -DCMAKE_VERBOSE_MAKEFILE=YES -DSDL2_LINKAGE=static -DBUILD_TESTING=YES
          cmake --build "${{ github.workspace }}/cmake-build-frontend-sdl2" --parallel --config Release
          cmake --install "${{ github.workspace }}/cmake-build-frontend-sdl2" --config Release
          #copy NUL install-frontend-sdl2\changelog.md
          echo "" > "D:\a\frontend-sdl-cpp\frontend-sdl-cpp\CHANGELOG.md"
          #echo.> install-frontend-sdl2\changelog.md
          dir install-frontend-sdl2
          
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: upload windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: install-frontend-sdl2
          asset_name: dirout.zip
          asset_content_type: application/zip
